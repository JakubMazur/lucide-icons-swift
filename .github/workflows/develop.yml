name: Auto-update Lucide Icons

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release from Lucide
        id: get_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/lucide-icons/lucide/releases/latest | jq -r '.tag_name')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Get previous release from Lucide
        id: get_previous_release
        run: |
          PREVIOUS_RELEASE=$(cat .previous_release || echo "none")
          echo "PREVIOUS_RELEASE=$PREVIOUS_RELEASE" >> $GITHUB_ENV

      - name: Fetch new icons set
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          curl -L -o lucide.zip https://github.com/lucide-icons/lucide/archive/refs/tags/$LATEST_RELEASE.zip
          unzip -q lucide.zip          
          echo $LATEST_RELEASE > .previous_release
          git add .previous_release

      - name: Process SVG files into Xcode asset catalog
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          EXTRACTED_DIR="lucide-$LATEST_RELEASE/icons"
          rm -rf Sources/LucideIcons/icons.xcassets
          mkdir Sources/LucideIcons/icons.xcassets
          for svg in $EXTRACTED_DIR/*.svg; do
            svg_name=$(basename "$svg" .svg)
            mkdir -p "Sources/LucideIcons/icons.xcassets/${svg_name}.imageset"
            cp "$svg" "Sources/LucideIcons/icons.xcassets/${svg_name}.imageset/"
            cat <<EOF > "Sources/LucideIcons/icons.xcassets/${svg_name}.imageset/Contents.json"
           {
              "images" : [
                {
                  "filename" : "$svg_name.svg",
                  "idiom" : "universal"
                }
              ],
              "info" : {
                "author" : "xcode",
                "version" : 1
              },
              "properties" : {
                "preserves-vector-representation" : true
              }
            }
          EOF
          done
          git add Sources/LucideIcons/icons.xcassets

      - name: Generate Swift files
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          generate_swift_file() {
            PLATFORM=$1
            IMPORT=$2
            IMAGE_TYPE=$3
            IMAGE_INIT=$4
            SWIFT_FILE="Sources/LucideIcons/Lucide+$PLATFORM.swift"
            echo "// This is autogenarated file" > $SWIFT_FILE
            echo "// DO NOT EDIT" >> $SWIFT_FILE
            echo "" >> $SWIFT_FILE
            echo "#if canImport($IMPORT)" >> $SWIFT_FILE
            echo "import $IMPORT" >> $SWIFT_FILE
            echo "" >> $SWIFT_FILE
            echo "extension Lucide {" >> $SWIFT_FILE
            for svg in Sources/LucideIcons/icons.xcassets/*.imageset; do
              svg_name=$(basename "$svg" .imageset)
              camel_case_name=$(echo "$svg_name" | awk -F- '{for(i=2;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)}1' OFS= | sed 's/-//g')
              camel_case_name=$(echo "$camel_case_name" | sed 's/^\(.\)/\L\1/')
              if [ "$PLATFORM" = "iOS" ]; then
                echo "  public static let \`$camel_case_name\`: $IMAGE_TYPE = $IMAGE_INIT(named: \"$svg_name\", in: Bundle.module, compatibleWith: nil)!" >> $SWIFT_FILE
              else
                echo "  public static let \`$camel_case_name\`: $IMAGE_TYPE = $IMAGE_INIT(forResource: \"$svg_name\")!" >> $SWIFT_FILE
              fi
            done
            echo "}" >> $SWIFT_FILE
            echo "" >> $SWIFT_FILE
            echo "#endif" >> $SWIFT_FILE
            git add $SWIFT_FILE
          }
      
          generate_swift_file "macOS" "AppKit" "NSImage" "Bundle.module.image"
          generate_swift_file "iOS" "UIKit" "UIImage" "UIImage"

      - name: Create tag and release
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          TAG_NAME=$LATEST_RELEASE
          git tag $TAG_NAME
          git push origin $TAG_NAME
          curl -s -X POST https://api.github.com/repos/${{ github.repository }}/releases \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- <<EOF
          {
            "tag_name": "$TAG_NAME",
            "target_commitish": "develop",
            "name": "$TAG_NAME",
            "body": "Release for $TAG_NAME",
            "draft": false,
            "prerelease": false,
            "make_latest": "true"
          }
          EOF

      - name: Cleanup
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          rm lucide.zip
          rm -rf lucide-$LATEST_RELEASE
        
      - name: Commit and push changes
        if: env.LATEST_RELEASE != env.PREVIOUS_RELEASE
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          if [ -n "$(git status --porcelain)" ]; then
            echo "Pushing changes"
            git commit -m "$LATEST_RELEASE"
            git push origin HEAD:develop
          fi
